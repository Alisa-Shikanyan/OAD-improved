# -*- coding: utf-8 -*-
"""
Created on Fri Jan 28 11:55:02 2022

@author: Student
"""

#для домашки

import numpy as np
import matplotlib.pyplot as plt
import json #json текстовый формат, оч похож на питоновский словарь(??), словари читать и писать изи в этом формате

#напишем словарь чтобы чекнуть библиотеку json
d = {
     'electron':{
        'mass':1, #1 это просто значения вроде
        'charge':-1,
    },
    'photon':{}, #это типа пустой словарь дали фотону
    'positron':{
        'mass':1,
        'charge':1,
    },
     
}
with open('particles.json', 'x') as f: #x записывать
    json.dump(d, f) #записали словарь, создали
with open('particles.json', 'r') as f: #r читать
    p = json.load(f)
print(p['electron']) #просто экзампл как у нас записалось

#чекнем матплотлиб
plt.plot(np.random.randint(0,100, size = 100), label='dd') #короче я хз тут как-то не отображается график тут он в отдельном окне потому что чето qt5 в настройках пофиг
plt.legend() #легенду построить
#ладно матплотлиб чекнем потом

#что-то про чтение бинарных форматов
from scipy.io import netcdf #умеет читать нетсдф
# рабочий метод но хз with netcdf.netcdf_file('D:/sh/tos_O1_2001-2002.nc', mmap = False) as net: #false чето с памятью
net = netcdf.netcdf_file('D:/sh/tos_O1_2001-2002.nc', mmap = False)
print(net.dimensions) #чет важное, кого сколько, если вдруг длину не дает то юзать len
print(net.variables['lon'].data) #собственно данные lon, можно люые другие там lat, time 


#координаты парсятся самостоятельно))))) means числа воспринимаются как числа все ок
#надо найти ближайшее к заданным координатам чето типа search for (?) как с прошлого сема

#скорее всего надо использовать average_03_column (не std которое наверное стандартное отклонение)

#average_03_column это 3д массив, считать его массивом, первое это время, второе-третье широта-долгота (чекнуть кто кто)
#net.variables[время, чето (широта/долгота), чето2]
#считать что 2020 последний а остальные от него
